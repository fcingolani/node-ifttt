// Generated by CoffeeScript 1.8.0

/*
Inspired by https://github.com/baalexander/node-xmlrpc/blob/master/lib/server.js
 */

(function() {
  var Deserializer, EventEmitter, Serializer, Server,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  EventEmitter = require('events').EventEmitter;

  Deserializer = require('xmlrpc/lib/deserializer');

  Serializer = require('xmlrpc/lib/serializer');

  Server = (function(_super) {
    __extends(Server, _super);

    function Server() {
      return Server.__super__.constructor.apply(this, arguments);
    }

    Server.prototype.handleMethodCall = function(req, res, next) {
      var deserializer;
      deserializer = new Deserializer;
      return deserializer.deserializeMethodCall(req, (function(_this) {
        return function(error, methodName, params) {
          if (_this._events.hasOwnProperty(methodName)) {
            return _this.emit(methodName, null, params, function(error, value) {
              var xml;
              if (error === null) {
                xml = Serializer.serializeMethodResponse(value);
              } else {
                xml = Serializer.serializeFault(error);
              }
              res.writeHead(200, {
                'Connection': 'close',
                'Content-Length': xml.length,
                'Content-Type': 'text/xml',
                'Date': Date.toString()
              });
              return res.end(xml);
            });
          } else {
            _this.emit('NotFound', methodName, params);
            res.writeHead(404);
            return res.end;
          }
        };
      })(this));
    };

    return Server;

  })(EventEmitter);

  module.exports = Server;

}).call(this);
